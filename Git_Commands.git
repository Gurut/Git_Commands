-- First Time Git Setup -- Customization of the git environment on your computer

	--Your Identity--
		--Set your user name and e-mail address

$ git config --global user.name "Gurut"
$ git config --global user.email "samettonyali29@gmail.com"

You can run these commands without "global" parameter to change these values for specific projects when you are in those projects' git folders.

		--Set default text editor--
$ git config --global core.editor vi

		--Check your configuration settings--
$ git config --list

		-- Retrieve a specific key's value--
$ git config <keyvalue>
$ git config user.name

		--Help--
$ git help <verb>
$ git help config

		--For a quick refresher--
$ git <verb> -h
$ git config -h

	--Initializing a repository in an existing directory--
$ cd ~/user/theproject	//Go to that project's directory
$ git init	//Initialize the git project. This command creates .git folder that contains all of necessary repository files
$ git add <file or files>	//Specify the files that you want to track
$ git commit -m 'Comments for the commit'

	--Cloning an existing repository--*
$ git clone <url> <directory_name>**

*the command is "clone" and not "checkout". This is an importantdistinction — instead of getting just a working copy, Git receives a full copy of nearly all data thatthe server has. Every version of every file for the history of the project is pulled down by defaultwhen you run git clone.
**Optional

		--Recording changes to the Repository--
	--Checking the Status of the Files--
$ git status
$ git status -s //for a simplified output

	--Tracking New Files--
$ git add <file_name>	//think of it more as “add precisely this content to the next commit”rather than “add this file to the project”


* Create a .gitignore file for the files that you do not want Git to automatically add or even show you as being untracked.

Example: 
$ cat .gitignore
# Ignore any files ending in ".o" or ".a"
*.[oa]
# Ignore all files whose name ends with a tilde
*~
# Ignore all .a files
*.a
# but do track lib.a, even though you are ignoring .a files above
!lib.a
# only ignore the TODO file in the current directory, not subdir/TODO
/TODO
# ignore all files in any directory named build
build/
# Ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt
# Ignore all .pdf files in the doc/ directory and any of its subdirectories
doc/**/*.pdf

	--To see what is changed but not yet staged--
$ git diff	// That command compares what is in your working directory with what is in your staging area. Theresult tells you the changes you’ve made that you haven’t yet staged.
$ git diff --staged	// This command compares your staged changes to your last commit and shows what you’ve staged that will go into your next commit.
$ git diff --cached	// To see what you have staged so far

	--To Skip the Staging area--
$ git commit -a -m '<Your comment for this commit>'

	--Removing Files--
$ rm TOBEDELETEDFILE.md	// delete first if the file is staged
$ git rm TOBEDELETEDFILE.md	// then remove from the index
$ git rm -f TOBEDELETEDFILE.md	// or you must force the removal
$ git rm --cached TOBEDELETEDFILE.md	// keep the file in working tree (on the hard drive) but remove it from the staging area (Git does not track it anymore)

	--Moving Files--
$ git mv <file_from> <file_to>	// changes file names

	--Viewing the Commit History--
$ git log	// execute in the project
$ git log -p	// shows the difference (the patch output)
$ git log --stat	// some abbreviated stats for each commit
$ git log --pretty=<format>	// Check "Table 1. Useful options for git log --pretty=format" in the book Pro Git by Scott Chacon. For more, check Table 2 in the book.

	--Limiting Log Output--
$ git log --since=2.weeks	// gets the list of commits made in the last two weeks

	--Undoing Things--
$ git commit --amend	// If you want to redo a commit, make the additional changes you forgot, stage them, and commit again using the --amend option

// For example: If you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
// The second commit replaces the results of the first

		--Unstaging a Staged File--
// For example, let’s say you’ve changed two files and want to commit them as two separate changes, but you accidentally type git add * and stage them both.
// How can you unstage one of the two?
$ git reset HEAD <file>	// Avoid using with --hard flag

		--Unmodifying a Modified File--
// What if you realize that you don’t want to keep your changes to a file? How can you easily unmodify it — revert it back to what it looked like when you last committed (or initially 
// cloned, or however you got it into your working directory)?
$ git checkout -- <file>
// !!!Caveat!!! It’s important to understand that git checkout -- <file> is a dangerous command.Any local changes you made to that file are gone — Git just copied the most 
// recently-committed version of that file over top of it. Don’t ever use this command unless you absolutely know that you don’t want those unsaved local changes.

	--Working with Remotes--
		--Showing Your Remotes--
$ git remote

		--Adding Remote Repositories--
$ git remote add <shortname> <url>

		--Fetching and Pulling from Your Remotes--
$ git fetch <remote>	// only downloads the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on.
$ git pull <remote>	// automatically fetch and then merge that remote branch into your current branch

		--Pushing to Your Remotes--
$ git push <remote> <branch>
$ git push origin master
// If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected. You’ll have to fetch their work first and
// incorporate it into yours before you’ll be allowed to push.

		--Inspecting a Remote--
$ git remote show <remote>
$ git remote show origin

		--Renaming and Removing Remotes--
$ git remote rename <old_name> <new_name>	// rename
$ git remote remove <short_name>

	--Tagging--
		--Listing Your Tags--
$ git tag
$ git tag -l "v1.8.5*"	// interested only in looking at the 1.8.5 series

		--Creating Tags--
$ 

…or create a new repository on the command line

echo "# OnlineVotinginItsInfancy" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/Gurut/OnlineVotinginItsInfancy.git
git push -u origin master


…or push an existing repository from the command line

git remote add origin https://github.com/Gurut/OnlineVotinginItsInfancy.git
git push -u origin master
